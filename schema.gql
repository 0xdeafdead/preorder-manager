# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateOrderInput {
  preorderId: String!

  """Amount of items to request"""
  quantity: Int!
  userId: String!
}

input CreatePreorderInput {
  closeDate: DateTime!
  description: String
  price: Float!
  productName: String!
  productSKU: String!
  releaseDate: DateTime!
  tags: [Game!]!
}

input CreateUserInput {
  email: String!
  fullName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Game {
  DIGIMON
  GUNDAM
  MTG
  ONEPIECE
  OTROS
  POKEMON
}

input ListOrderInput {
  page: Int! = 1
  pageSize: Int! = 10
  search: String
  tag: Game
  userId: String!
}

input ListPreordersInput {
  page: Int! = 1
  pageSize: Int! = 10
  search: String
  tag: Game
}

input ListUsersInput {
  page: Int! = 1
  pageSize: Int! = 10
  search: String
}

"""Mongo Object Id"""
scalar MongoObjectId

type Mutation {
  changeAvailability(id: String!): Preorder!
  createOrder(input: CreateOrderInput!): Order!
  createPreorder(input: CreatePreorderInput!): Preorder!
  createUser(input: CreateUserInput!): User!
  deactivateUser(id: String!): User!
  removeOrder(id: String!): Order!
  removePreorder(id: String!): Preorder!
  removeUser(id: String!): User!
  softDeletePreorder(id: String!): Preorder!
  updateOrder(input: UpdateOrderInput!): Order!
  updatePreorder(input: UpdatePreorderInput!): Preorder!
  updateUser(input: UpdateUserInput!): User!
}

type Order {
  createdAt: DateTime!
  deletedAt: DateTime
  id: MongoObjectId!
  preorder: Preorder!
  quantity: Int!
  updatedAt: DateTime!
  user: User!
}

type PaginatedOrders {
  edges: [Order!]
  page: Int
  pageSize: Int
  total: Int
}

type PaginatedPreorders {
  edges: [Preorder!]
  page: Int
  pageSize: Int
  total: Int
}

type PaginatedUsers {
  edges: [User!]
  page: Int
  pageSize: Int
  total: Int
}

type Preorder {
  available: Boolean!
  closeDate: DateTime!
  deletedAt: DateTime
  description: String
  id: MongoObjectId!
  price: Float!
  productName: String!
  productSKU: String!
  releaseDate: DateTime!
  tags: [Game!]!
}

type Query {
  findPreorderById(id: String!): Preorder!
  getOrderById(id: String!): Order!
  getUserByEmail(email: String!): User!
  getUserById(id: String!): User!
  listOrders(input: ListOrderInput!): PaginatedOrders!
  listPreorders(input: ListPreordersInput!): PaginatedPreorders!
  listUsers(input: ListUsersInput!): PaginatedUsers!
}

input UpdateOrderInput {
  id: String!

  """
  Amount of items to request. Must be lower than actual order, but greater than 0
  """
  quantity: Int!
}

input UpdatePreorderInput {
  closeDate: DateTime
  description: String
  id: String!
  price: Float
  productName: String
  productSKU: String
  releaseDate: DateTime
  tags: [Game!]
}

input UpdateUserInput {
  fullName: String
  id: String!
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  enabled: Boolean!
  fullName: String!
  id: MongoObjectId!
  updatedAt: DateTime!
}